import com.github.gradle.node.npm.task.NpmTask

plugins {
    id 'java'
    id 'jacoco'
    id 'io.quarkus'
    id 'com.github.node-gradle.node' version '7.0.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    implementation 'io.quarkus:quarkus-liquibase'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-smallrye-jwt'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-smallrye-jwt-build'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkiverse.quinoa:quarkus-quinoa:2.5.4'

    implementation 'org.mindrot:jbcrypt:0.4'

    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    compileOnly 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
}

group 'krilovs.andrejs.app'
version '2.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

node {
    version = '22.16.0'
    download = true
    nodeProjectDir = file("src/main/webui")
}

def frontendDir = file("src/main/webui")

tasks.register("npmBuild", NpmTask) {
    dependsOn tasks.npmInstall
    args = ['run', 'build']
    inputs.dir("$frontendDir/src")
    outputs.dir("$frontendDir/dist")
}

tasks.named("build") {
    dependsOn "npmBuild"
}

tasks.named("check") {
    dependsOn jacocoTestCoverageVerification
}